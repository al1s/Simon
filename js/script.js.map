{"version":3,"sources":["script.js"],"names":["App","init","UL","UR","originalSimonSounds","LR","simonSwipeSounds","this","stepsInGame","soundLib","playSound","bind","e","log","debug","trace","target","value","changeStyle","id","split","play","GameEngine","playSequence","step","sequence","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","slice","i","elm","getElementByName","err","_iterator","return","randomRange","arr","Math","floor","random","length","generateSequence","Array","fill","reduce","prev","current","ndx","_this","Object","keys","SoundGen","start","context","window","AudioContext","webkitAudioContext","setup","createOscillator","gainNode","createGain","connect","type","oscillator","frequency","setValueAtTime","currentTime","gain","linearRampToValueAtTime","playInTime","time","exponentialRampToValueAtTime","stopAtTime","stop","UI","listen","_this2","buttons","document","querySelectorAll","btnPower","querySelector","togglePressedState","forEach","classList","addEventListener","setTimeout","toggle","name"],"mappings":"aAkBA,IAAIA,IAAM,CACRC,KADQ,WAAND,KAAAA,oBAAM,CAAAE,GAAA,QAENC,GAAKC,IACHF,GAAI,OACJC,GAAI,SAEJE,KAAAA,iBAAI,CAJNH,GAAA,QAMAC,GAAKG,QACHJ,GAAI,OACJC,GAAI,SAEJE,KAAAA,SAAIE,KAAAD,iBAJkBC,KAAxBC,YAAA,GAMAD,KAAKE,YAAW,EAChBF,KAAKC,UAALD,KAAAG,UAAAC,KAAAJ,OAGDG,UAlBO,SAAAE,GAoBRF,IAAAA,MApBQ,+BAqBNG,IAAIC,MAAMF,GACVC,KAAIE,YAAJH,EAAAI,QACA,IAAAC,EAAKC,KAAYN,SAAjBA,EAAAI,OAAAG,GAAAC,MAAA,KAAA,IACAb,KAAIU,KAAAA,GACJV,KAAKc,SAKLC,WAAa,CAAjBC,aAAiB,SAAbD,EAAaE,GACfD,IAAAA,MAAAA,4BAAaE,GADE,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEbhB,IAAAA,IAAAA,EAAAA,EAAAY,EAAAK,MAAA,EAAAN,EAAA,GAAAX,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAsCW,CAAAA,IAAtCO,EAAsCP,EAAAA,MADXQ,EAAAzB,KAAA0B,iBAAAF,GAAAxB,KAAAG,UAAA,CAAAM,OAAAgB,KADd,MAAAE,GAAAP,GAAA,EAAAC,EAAAM,EAAA,QAAA,KAAAR,GAAAS,EAAAC,QAAAD,EAAAC,SAAA,QAAA,GAAAT,EAAA,MAAAC,KAGbS,YAHa,SAGbC,GAA2C,OAAAA,EAAAC,KAAAC,MAAAD,KAAAE,SAAAH,EAAAI,UAEzCC,iBALW,SAKNjC,GAAYM,IAAAA,EAAAA,KAClBH,IAAAC,MAAA,uBAL0B,IAAAW,EAAA,IAAAmB,MAAAF,GAAAG,UAAAhB,GAAA,OAAAJ,EAAAqB,OAAA,SAAAC,EAAAC,EAAAC,GAAA,KAAAF,KAAAC,EAAAE,EAAAb,YAAAc,OAAAC,KAAAF,EAAAzC,cAAA,OAAAgB,EAAAwB,GAAAD,GAAA,IAAAvB,IAAA4B,SAAA,CAAAC,MAAA,WADd/C,KAAAgD,QAAA,IAAAC,OAAAC,cAAAD,OAAAE,qBAWdC,MAV4B,WAY7BhB,KAAAA,WAbepC,KAAAgD,QAAAK,mBAaUrD,KAAAsD,SAAAtD,KAAAgD,QAAAO,aACvBjD,KAAIC,WAAMiD,QAAAxD,KAAAsD,UACVtD,KAAIkB,SAAAA,QAAemB,KAAMF,QAAQG,aACjCpB,KAAAA,WAAgBuC,KAAA,QAGb3C,KAlBwB,SAgBzBJ,GAGAQ,KAAAA,QACAZ,IAAAC,MAAA,eAAAG,GACDV,KAND0D,WAAAC,UAAAC,eAAAlD,EAAAV,KAAAgD,QAAAa,aAOA7D,KAAAsD,SAAOpC,KAAP0C,eAAA,EAAA5D,KAAAgD,QAAAa,aACD7D,KAAAsD,SAAAQ,KAAAC,wBAxBH,EAgDM/D,KAAKgD,QAAQa,YAAc,KApB/Bd,KADaW,WAAAX,MACL/C,KAAAgD,QAAAa,aACN7D,KAAKgD,QAILgB,WAhC2B,SAgCtBN,EAALO,GACAjE,KAAKsD,QAsBLhD,IAAIC,MAAJ,eAAyBG,GApBzBV,KAAK0D,WAAWF,UAAQI,eACxBlD,EACAV,KAAK0D,QAALG,YAAAI,GAGFnD,KAdawC,SAAAQ,KAcRpD,eAAO,EAAAV,KAAAgD,QAAAa,YAAAI,GACVjE,KAAKoD,SAALU,KAAAC,wBACAzD,EACAN,KAAK0D,QAALG,YAA0BD,EAAAA,KAE1B5D,KAAKsD,WAASQ,MAAKC,KAAAA,QAAAA,YAEjBE,GAEFjE,KAAK0D,WAAWX,IAIlBiB,KArD6B,WAsD3BhE,KAAKoD,SAALU,KAAAI,6BACA5D,KACAN,KAAK0D,QAALG,YAA0BD,GAK1B5D,KAAKsD,WAASQ,KAAKC,KAAAA,QAAAA,YAEjB,IAIHI,WAnE4B,SA0BhBF,GA2CbG,KA3Cad,SAAAQ,KAAAI,6BA4CX,KAIAlE,KAAK0D,QAALG,YAA0Bb,EAAQa,GAGpCM,KAAAA,WAnDaC,KAAApE,KAAAgD,QAAAa,YAmDII,EAAA,KAnDnBI,GAAA,CA6DEC,OA7DF,WA6DW,IAAAC,EAAAvE,KADPqE,IAAAA,MAAK,mBACPC,IADOE,EAAAC,SAAAC,iBACE,eAAAC,EAAAF,SAAAG,cAAA,aAIPtE,IAAIE,MAAM,qBAHVF,IAAIC,MAAMiE,GACVA,EAAIA,QAAUC,SAAAA,GAAAA,OAASC,EAAAA,iBAAiB,QAA1BH,EAAdpE,aACAwE,EAAIA,iBAAoBC,QAAAA,KAAcC,qBAGtCL,YAnEJ,SAmEYM,GAAQrD,EAAAsD,UAAWC,OAAAA,WAAXC,WAAhB,WAAA,OAAAxD,EAAAsD,UAAAG,OAAA,YAAA,MAIFvE,iBAvEF,SA4DSwE,GAYL1D,OAAIsD,SAAUG,cAAVH,WAAJI,IACWN,mBAzEf,SAyEIxE,GAbKA,EAAAI,OAAAsE,UAAAG,OAAA,eAoBPL,IAAAA,SAAAA,SACExE,OAAEI,OAAOsE,IAAAA,SAAThE,WAAAsD,IACD5E,IAAAC,OAtBMD,IAATsD,QA6BAtD,IAAI6E","file":"script.js","sourcesContent":["/* eslint no-var: 0 */\n/* eslint vars-on-top: 0 */\n/* eslint prefer-const: 0 */\n/* eslint arrow-parens: 0 */\n/* eslint no-restricted-syntax: 0 */\n\n/*\n  (game engine) implement sequence generator;\n  (UI) add control panel;\n\n*/\n\n/*\nUL: E -  164.814 (octave lower)\nUR: A -  440\nLL: C# - 277.18\nLR: E -  329.628\n*/\nvar App = {\n  init() {\n    this.originalSimonSounds = {\n      UL: 164.814,\n      UR: 440,\n      LL: 277.18,\n      LR: 329.628,\n    };\n    this.simonSwipeSounds = {\n      UL: 523.251, // 783.991 - original\n      UR: 329.628,\n      LL: 261.63,\n      LR: 391.995,\n    };\n    this.soundLib = this.simonSwipeSounds;\n    this.stepsInGame = 30;\n    this.currentStep = 1;\n    this.playSound = this.playSound.bind(this);\n  },\n\n  playSound(e) {\n    log.debug('Play sound on a mouse click');\n    log.trace(e);\n    this.changeStyle(e.target);\n    var value = this.soundLib[e.target.id.split('_')[1]];\n    this.play(value);\n    this.stop();\n  },\n};\n\nvar GameEngine = {\n  playSequence(sequence, step) {\n    log.debug(`Playing sequence on step ${step}`);\n    for (let i of sequence.slice(0, step - 1)) {\n      var elm = this.getElementByName(i);\n      this.playSound({ target: elm });\n    }\n  },\n\n  randomRange(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  },\n\n  generateSequence(length) {\n    log.debug('Generating sequence');\n    var sequence = new Array(length).fill(undefined);\n    sequence.reduce((prev, current, ndx) => {\n      do {\n        current = this.randomRange(Object.keys(this.soundLib));\n      } while (prev === current);\n      sequence[ndx] = current;\n      return current;\n    }, '');\n    return sequence;\n  },\n};\n\nvar SoundGen = {\n  start() {\n    this.context = new (window.AudioContext || window.webkitAudioContext)();\n  },\n\n  setup() {\n    this.oscillator = this.context.createOscillator();\n    this.gainNode = this.context.createGain();\n\n    this.oscillator.connect(this.gainNode);\n    this.gainNode.connect(this.context.destination);\n    this.oscillator.type = 'sine';\n  },\n\n  play(value) {\n    this.setup();\n    log.debug(`Tone value: ${value}`);\n    this.oscillator.frequency.setValueAtTime(value, this.context.currentTime);\n    this.gainNode.gain.setValueAtTime(0, this.context.currentTime);\n    this.gainNode.gain.linearRampToValueAtTime(\n      1,\n      this.context.currentTime + 0.01,\n    );\n    this.oscillator.start(this.context.currentTime);\n    this.stop();\n  },\n\n  playInTime(value, time) {\n    this.setup();\n    log.debug(`Tone value: ${value}`);\n    this.oscillator.frequency.setValueAtTime(\n      value,\n      this.context.currentTime + time,\n    );\n    this.gainNode.gain.setValueAtTime(0, this.context.currentTime + time);\n    this.gainNode.gain.linearRampToValueAtTime(\n      1,\n      this.context.currentTime + time + 0.01,\n    );\n    this.oscillator.start(this.context.currentTime + time);\n    this.stopAtTime(time);\n  },\n\n  stop() {\n    this.gainNode.gain.exponentialRampToValueAtTime(\n      0.001,\n      this.context.currentTime + 1,\n    );\n    this.oscillator.stop(this.context.currentTime + 1);\n  },\n\n  stopAtTime(time) {\n    this.gainNode.gain.exponentialRampToValueAtTime(\n      0.001,\n      this.context.currentTime + time + 1,\n    );\n    this.oscillator.stop(this.context.currentTime + time + 1);\n  },\n};\n\nvar UI = {\n  listen() {\n    log.debug('Listening on UI');\n    var buttons = document.querySelectorAll('.buttonGame');\n    var btnPower = document.querySelector('#btnPower');\n    log.trace('Buttons selected:');\n    log.trace(buttons);\n    buttons.forEach(btn => btn.addEventListener('click', this.playSound));\n    btnPower.addEventListener('click', this.togglePressedState);\n  },\n\n  changeStyle(elm) {\n    elm.classList.toggle('--blink');\n    setTimeout(() => elm.classList.toggle('--blink'), 300);\n  },\n\n  getElementByName(name) {\n    return document.querySelector(`#button_${name}`);\n  },\n\n  togglePressedState(e) {\n    e.target.classList.toggle('--pressed');\n  },\n};\n\nlog.setLevel('debug');\nObject.assign(App, SoundGen, GameEngine, UI);\nApp.init();\nApp.start();\nApp.listen();\n"],"sourceRoot":"/source/"}