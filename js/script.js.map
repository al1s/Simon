{"version":3,"sources":["script.js"],"names":["window","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","callback","cancelAnimFrame","clearTimeout","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","App","cancelRequestAnimationFrame","start","webkitRequestCancelAnimationFrame","originalSimonSounds","UL","oRequestCancelAnimationFrame","UR","msRequestCancelAnimationFrame","LL","id","LR","soundLib","stepsInGame","this","currentNoteInStep","tempo","strictMode","reactionDelay","messageError","messageWin","simonSwipeSounds","gameButtonNames","currentStep","notesInQueue","lastNoteToDraw","requestId","playSequence","repeatSequence","playPhrase","handleStart","bind","handleGameState","draw","sequence","log","debug","step","playSound","setStrictMode","push","note","time","ndx","_this","Promise","context","currentTime","JSON","stringify","all","map","item","console","playInTime","_this2","_typeof","randomRange","forEach","Math","random","arr","length","generateSequence","reduce","current","keys","floor","handleWin","_this3","fanfareSeq","fanfareSounds","fill","undefined","G1","prev","C2","E2","Object","repeatBtn","then","listen","_this4","trace","startBtn","addEventListener","soundButtons","args","UI","pauseListen","_this5","document","querySelectorAll","querySelector","strictBtn","resumeListen","btn","pauseListenElm","_this6","elm","classList","concat","_toConsumableArray","resumeListenElm","_this7","setTimeout","toggle","blinkAttr","add","getNote","remove","className","changeStyle","notePressed","noteName","getElementByName","name","e","target","split","syncMessage","later","_this8","apply","_this9","messageStop","togglePressedState","delay","value","arguments","resolve","messageElm","innerHTML","message","currentNote","splice","_this10","cancelAnimationFrame","oscillator","gainNode","setValueAtTime","frequency","linearRampToValueAtTime","SoundGen","playInTimePromise","AudioContext","webkitAudioContext","setup","stopAtTime","gain","setLevel","assign","onended","_this11","exponentialRampToValueAtTime","stop","init"],"mappings":"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","file":"script.js","sourcesContent":["/* eslint no-var: 0 */\n/* eslint vars-on-top: 0 */\n/* eslint prefer-const: 0 */\n/* eslint arrow-parens: 0 */\n/* eslint no-restricted-syntax: 0 */\n\n/*\n  +(game engine) implement sequence generator;\n  +(game engine) implement game loop;\n  +(UI) add control panel;\n  +(UI) conditions to stop requestAnimationFrame loop;\n  +(UI) make UI elements wait till current routine executes;\n  (UI) block game buttons while playing sequence;\n  +(game) test thorouhgly:\n    - strict is not working;\n    - sometimes after error it starts to play the whole sequence;\n  (Improvement) add tempo control to UI;\n\n*/\n\n/* Notes and game flow\nTo implement accessible game I need to assing special keyboard layout\nto game process - map mouse gestures to keys;\n\nButtons in game:\nOn/Off\nRepeat\nStrict\n\nGame process:\n1. On Start game load the game engine.\n2. Choose a random sequence and keep it as current.\n3. Save current game position - 1. \n4. Play sequence from beginning to the current position inclusive.\n5. Wait for user input.\n6. Compare each entered element with corresponding element in sequence.\n7. On error: show message; buzz.\n8. On success: move current position one element right; repeat from step 3.\n8. On success in strict mode: repeat from step 2.\n*/\n\n/*\nUL: E -  164.814 (octave lower)\nUR: A -  440\nLL: C# - 277.18\nLR: E -  329.628\n*/\n\n// First, let's shim the requestAnimationFrame API, with a setTimeout fallback\nwindow.requestAnimFrame = (() => {\n  return (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    (callback => window.setTimeout(callback, 1000 / 60))\n  );\n})();\n\nwindow.cancelAnimFrame = (() => {\n  return (\n    window.cancelAnimationFrame ||\n    window.webkitCancelAnimationFrame ||\n    window.mozCancelAnimationFrame ||\n    window.oCancelAnimationFrame ||\n    window.msCancelAnimationFrame ||\n    window.cancelRequestAnimationFrame ||\n    window.webkitRequestCancelAnimationFrame ||\n    window.mozRequestCancelAnimationFrame ||\n    window.oRequestCancelAnimationFrame ||\n    window.msRequestCancelAnimationFrame ||\n    (id => clearTimeout(id))\n  );\n})();\n\nvar App = {\n  start() {\n    this.originalSimonSounds = {\n      UL: 164.814,\n      UR: 440,\n      LL: 277.18,\n      LR: 329.628,\n    };\n    this.simonSwipeSounds = {\n      UL: 523.251, // 783.991 - original\n      UR: 329.628,\n      LL: 261.63,\n      LR: 391.995,\n    };\n    this.soundLib = this.simonSwipeSounds;\n    this.stepsInGame = 20;\n    this.currentStep = 1;\n    this.currentNoteInStep = 1;\n    this.tempo = 120;\n    this.strictMode = false;\n    this.reactionDelay = 1 * 1000;\n    this.messageError = '!!';\n    this.messageStop = '--';\n    this.messageWin = '00';\n    this.gameButtonNames = ['UR', 'LR', 'LL', 'UL'];\n\n    // utility\n    this.notesInQueue = [];\n    this.lastNoteToDraw = '';\n    this.requestId = -1;\n    this.playSequence = this.playSequence.bind(this);\n    this.repeatSequence = this.repeatSequence.bind(this);\n    this.playPhrase = this.playPhrase.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.setStrictMode = this.setStrictMode.bind(this);\n    this.handleGameState = this.handleGameState.bind(this);\n    this.draw = this.draw.bind(this);\n  },\n\n  playSequence(sequence, step) {\n    log.debug(`Playing sequence on step ${step}`);\n    sequence.slice(0, step).forEach((note, ndx) => {\n      this.notesInQueue.push({\n        note,\n        time: ndx * 60 / this.tempo + this.context.currentTime,\n      });\n      // this.playInTime(this.soundLib[note], ndx * 60 / this.tempo);\n    });\n    log.debug(JSON.stringify(this.notesInQueue));\n    this.requestId = window.requestAnimFrame(this.draw);\n    return Promise.all(\n      this.notesInQueue.map(item =>\n        this.playInTimePromise(\n          this.soundLib[item.note],\n          item.time - this.context.currentTime,\n        ),\n      ),\n    );\n  },\n\n  playPhrase(sequence, soundLib) {\n    log.debug('Playing musical phrase');\n    let time = 0;\n    sequence.forEach((note, ndx) => {\n      console.log(`note in phrase: ${note}`);\n      if (typeof note[0] !== 'object') {\n        this.playInTime(soundLib[note[0]], time);\n        this.notesInQueue.push({\n          note: this.gameButtonNames[ndx > 3 ? ndx % 4 : ndx],\n          time: time + this.context.currentTime,\n        });\n      } else {\n        note[0].forEach(item => {\n          this.playInTime(soundLib[item], time, time);\n          this.notesInQueue.push({\n            note: 'ALL',\n            time: time + this.context.currentTime,\n          });\n        });\n      }\n      time += note[1];\n    });\n    this.requestId = window.requestAnimFrame(this.draw);\n  },\n\n  randomRange(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  },\n\n  generateSequence(length) {\n    log.debug('Generating sequence');\n    let sequence = new Array(length).fill(undefined);\n    sequence.reduce((prev, current, ndx) => {\n      do {\n        current = this.randomRange(Object.keys(this.soundLib));\n      } while (prev === current);\n      sequence[ndx] = current;\n      return current;\n    }, '');\n    return sequence;\n  },\n\n  handleWin() {\n    let fanfareSeq = [\n      ['G1', 0.25],\n      ['C2', 0.25],\n      ['E2', 0.25],\n      ['G2', 0.5],\n      ['E2', 0.25],\n      [['C2', 'E2', 'G2'], 0.5],\n    ];\n    let fanfareSounds = {\n      G1: 392.0,\n      C2: 523.251,\n      E2: 659.255,\n      G2: 783.99,\n    };\n    this.playPhrase(fanfareSeq, fanfareSounds);\n  },\n\n  repeatSequence() {\n    this.pauseListen();\n    this.later(this.reactionDelay * 0.5, [this.sequence, this.currentStep])\n      .then(args => this.playSequence(...args))\n      .then(() => this.resumeListen());\n  },\n};\n\nvar UI = {\n  listen() {\n    log.debug('Listening on UI');\n    this.soundButtons = document.querySelectorAll('.buttonGame');\n    this.repeatBtn = document.querySelector('#btnRepeat');\n    let startBtn = document.querySelector('#btnStart');\n    let strictBtn = document.querySelector('#btnStrict');\n    log.trace('Buttons selected:');\n    log.trace(this.soundButtons);\n    startBtn.addEventListener('click', this.handleStart);\n    this.soundButtons.forEach(btn =>\n      btn.addEventListener('click', this.handleGameState),\n    );\n    this.repeatBtn.addEventListener('click', this.repeatSequence);\n    strictBtn.addEventListener('click', this.setStrictMode);\n    this.pauseListen();\n  },\n\n  pauseListen() {\n    log.debug('Pause listening on color buttons');\n    [...this.soundButtons, this.repeatBtn].forEach(elm =>\n      this.pauseListenElm(elm),\n    );\n  },\n\n  resumeListen() {\n    log.debug('Resume listening on color buttons');\n    [...this.soundButtons, this.repeatBtn].forEach(elm =>\n      this.resumeListenElm(elm),\n    );\n  },\n\n  pauseListenElm(elm) {\n    elm.classList.add('--noevents');\n  },\n\n  resumeListenElm(elm) {\n    elm.classList.remove('--noevents');\n  },\n\n  blinkAttr(elm, className) {\n    elm.classList.toggle(className);\n    setTimeout(() => elm.classList.toggle(className), 200);\n  },\n\n  changeStyle(elm) {\n    var noteName = this.getNote({ target: elm });\n    this.blinkAttr(elm, `--blink-${noteName}`);\n  },\n\n  getElementByName(name) {\n    return document.querySelector(`#button_${name}`);\n  },\n\n  getNote(e) {\n    return e.target.id.split('_')[1];\n  },\n\n  handleGameState(e) {\n    this.playSound(e);\n    this.pauseListen();\n    var notePressed = this.getNote(e);\n    if (this.sequence[this.currentNoteInStep - 1] === notePressed) {\n      log.debug('Bingo!');\n      // We've played the whole step\n      if (this.currentNoteInStep === this.currentStep) {\n        // we've played the whole sequence\n        if (this.currentStep === this.stepsInGame) {\n          this.syncMessage(this.messageWin);\n          this.later(this.reactionDelay).then(this.handleWin());\n          // we are still somewhere in a sequence and ready for a new step\n        } else {\n          this.currentStep += 1;\n          this.currentNoteInStep = 1;\n          this.syncMessage(this.currentStep);\n          this.later(this.reactionDelay, [this.sequence, this.currentStep])\n            .then(args => this.playSequence(...args))\n            .then(() => this.resumeListen());\n        }\n        // wait for another note in current step\n      } else {\n        this.currentNoteInStep += 1;\n        this.resumeListen();\n      }\n    } else {\n      log.debug('Missed!');\n      this.syncMessage(this.messageError);\n      if (this.strictMode) {\n        this.later(this.reactionDelay * 2).then(() => this.handleStart());\n      } else {\n        this.currentNoteInStep = 1;\n        this.later(this.reactionDelay, [this.currentStep])\n          .then(args => {\n            this.syncMessage(...args);\n            return this.later(this.reactionDelay, [\n              this.sequence,\n              this.currentStep,\n            ]);\n          })\n          .then(args => this.playSequence(...args))\n          .then(() => this.resumeListen());\n      }\n    }\n  },\n\n  handleStart(e) {\n    this.currentStep = 1;\n    this.currentNoteInStep = 1;\n    this.sequence = this.generateSequence(this.stepsInGame);\n    this.syncMessage(this.messageStop);\n    this.togglePressedState(e);\n    this.later(this.reactionDelay, [this.currentStep])\n      .then(args => {\n        this.syncMessage(...args);\n        return [e];\n      })\n      .then(args => {\n        this.togglePressedState(...args);\n        return this.later(this.reactionDelay, [\n          this.sequence,\n          this.currentStep,\n        ]);\n      })\n      .then(args => this.playSequence(...args))\n      .then(() => this.resumeListen());\n  },\n\n  later(delay, value = []) {\n    return new Promise(resolve => setTimeout(() => resolve([...value]), delay));\n  },\n\n  playSound(e) {\n    log.debug('Play sound on a mouse click');\n    log.trace(e);\n    let value = this.getNote(e);\n    this.playSequence([value], 1);\n  },\n\n  togglePressedState(e) {\n    if (e) e.target.classList.toggle('--pressed');\n  },\n\n  setStrictMode(e) {\n    this.strictMode = !this.strictMode;\n    this.togglePressedState(e);\n  },\n\n  syncMessage(message) {\n    let messageElm = document.querySelector('#messageElm');\n    messageElm.innerHTML = message;\n  },\n\n  draw() {\n    let currentTime = this.context.currentTime;\n    let currentNote;\n    log.trace(\n      `Inside this.draw() notesInQueue: ${JSON.stringify(this.notesInQueue)}`,\n    );\n    while (\n      this.notesInQueue.length > 0 &&\n      this.notesInQueue[0].time < currentTime\n    ) {\n      currentNote = this.notesInQueue[0].note;\n      this.notesInQueue.splice(0, 1);\n    }\n\n    log.trace(\n      `Styling button; currentNote: ${currentNote}, lastNote: ${\n        this.lastNoteToDraw\n      }`,\n    );\n    if (currentNote !== undefined && this.lastNoteToDraw !== currentNote) {\n      if (currentNote !== 'ALL') {\n        this.changeStyle(this.getElementByName(currentNote));\n        this.lastNoteToDraw = currentNote;\n      } else {\n        this.gameButtonNames.forEach(name =>\n          this.changeStyle(this.getElementByName(name)),\n        );\n      }\n    }\n    this.requestId = window.requestAnimFrame(this.draw);\n    if (this.notesInQueue.length === 0) {\n      window.cancelAnimationFrame(this.requestId);\n      this.lastNoteToDraw = '';\n      this.requestId = undefined;\n    }\n  },\n};\n\nvar SoundGen = {\n  init() {\n    this.context = new (window.AudioContext || window.webkitAudioContext)();\n  },\n\n  setup() {\n    this.oscillator = this.context.createOscillator();\n    this.gainNode = this.context.createGain();\n\n    this.oscillator.connect(this.gainNode);\n    this.gainNode.connect(this.context.destination);\n    this.oscillator.type = 'sine';\n  },\n\n  playInTime(value, time) {\n    this.setup();\n    log.debug(`Tone value: ${value}`);\n    this.oscillator.frequency.setValueAtTime(\n      value,\n      this.context.currentTime + time,\n    );\n    this.gainNode.gain.setValueAtTime(0, this.context.currentTime + time);\n    this.gainNode.gain.linearRampToValueAtTime(\n      1,\n      this.context.currentTime + time + 0.01,\n    );\n    this.oscillator.start(this.context.currentTime + time);\n    this.stopAtTime(time);\n    this.oscillator.onended = () => Promise.resolve();\n  },\n\n  playInTimePromise(value, time) {\n    return new Promise(resolve => {\n      this.setup();\n      log.debug(`Tone value: ${value}`);\n      this.oscillator.frequency.setValueAtTime(\n        value,\n        this.context.currentTime + time,\n      );\n      this.gainNode.gain.setValueAtTime(0, this.context.currentTime + time);\n      this.gainNode.gain.linearRampToValueAtTime(\n        1,\n        this.context.currentTime + time + 0.01,\n      );\n      this.oscillator.start(this.context.currentTime + time);\n      this.stopAtTime(time);\n      this.oscillator.onended = () => resolve(value);\n    });\n  },\n\n  stopAtTime(time) {\n    this.gainNode.gain.exponentialRampToValueAtTime(\n      0.001,\n      this.context.currentTime + time + 1,\n    );\n    this.oscillator.stop(this.context.currentTime + time + 1);\n  },\n};\n\nlog.setLevel('debug');\nObject.assign(App, SoundGen, UI);\nApp.init();\nApp.start();\nApp.listen();\n"],"sourceRoot":"/source/"}