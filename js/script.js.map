{"version":3,"sources":["script.js"],"names":["window","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","callback","cancelAnimFrame","clearTimeout","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","App","cancelRequestAnimationFrame","start","webkitRequestCancelAnimationFrame","originalSimonSounds","UL","oRequestCancelAnimationFrame","UR","msRequestCancelAnimationFrame","LL","id","LR","soundLib","stepsInGame","this","currentNoteInStep","tempo","strictMode","reactionDelay","messageError","messageWin","simonSwipeSounds","gameButtonNames","currentStep","notesInQueue","lastNoteToDraw","requestId","playSequence","repeatSequence","playPhrase","handleStart","bind","handleGameState","draw","sequence","log","debug","step","playSound","setStrictMode","push","note","_this","ndx","length","time","context","currentTime","JSON","stringify","playInTimePromise","Promise","all","map","item","arr","forEach","_this2","_typeof","generateSequence","Array","fill","prev","randomRange","handleWin","Math","floor","random","G1","_this3","C2","E2","undefined","listen","G2","reduce","current","fanfareSeq","fanfareSounds","UI","pauseListen","repeatBtn","startBtn","strictBtn","addEventListener","_this4","soundButtons","document","querySelectorAll","resumeListen","querySelector","trace","resumeListenElm","btn","elm","classList","remove","blinkAttr","className","_this6","changeStyle","concat","_toConsumableArray","noteName","getNote","pauseListenElm","target","vibrateOnTouch","toggle","setTimeout","showMessage","getElementByName","name","e","split","_this7","notePressed","later","then","args","togglePressedState","apply","_this8","resume","value","resolve","_this9","navigator","vibrate","delay","arguments","currentNote","msVibrate","message","innerHTML","SoundGen","setup","splice","gainNode","playInTime","oscillator","setValueAtTime","linearRampToValueAtTime","_this10","init","AudioContext","createOscillator","createGain","stopAtTime","connect","gain","exponentialRampToValueAtTime","stop","setLevel","Object","assign","frequency","onended","_this11"],"mappings":"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","file":"script.js","sourcesContent":["/* eslint no-var: 0 */\n/* eslint vars-on-top: 0 */\n/* eslint prefer-const: 0 */\n/* eslint arrow-parens: 0 */\n/* eslint no-restricted-syntax: 0 */\n\n/*\n  +(game engine) implement sequence generator;\n  +(game engine) implement game loop;\n  +(UI) add control panel;\n  +(UI) conditions to stop requestAnimationFrame loop;\n  +(UI) make UI elements wait till current routine executes;\n  +(UI) block game buttons while playing sequence;\n  (UI) press on start button should stop all current flows and restart the game;\n  +(game) test thorouhgly:\n    - strict is not working;\n    - sometimes after error it starts to play the whole sequence;\n  (Improvement) add tempo control to UI;\n\n*/\n\n/* Notes and game flow\nTo implement accessible game I need to assing special keyboard layout\nto game process - map mouse gestures to keys;\n\nButtons in game:\nOn/Off\nRepeat\nStrict\n\nGame process:\n1. On Start game load the game engine.\n2. Choose a random sequence and keep it as current.\n3. Save current game position - 1. \n4. Play sequence from beginning to the current position inclusive.\n5. Wait for user input.\n6. Compare each entered element with corresponding element in sequence.\n7. On error: show message; buzz.\n8. On success: move current position one element right; repeat from step 3.\n8. On success in strict mode: repeat from step 2.\n*/\n\n/*\nUL: E -  164.814 (octave lower)\nUR: A -  440\nLL: C# - 277.18\nLR: E -  329.628\n*/\n\n// First, let's shim the requestAnimationFrame API, with a setTimeout fallback\nwindow.requestAnimFrame = (() => {\n  return (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    (callback => window.setTimeout(callback, 1000 / 60))\n  );\n})();\n\nwindow.cancelAnimFrame = (() => {\n  return (\n    window.cancelAnimationFrame ||\n    window.webkitCancelAnimationFrame ||\n    window.mozCancelAnimationFrame ||\n    window.oCancelAnimationFrame ||\n    window.msCancelAnimationFrame ||\n    window.cancelRequestAnimationFrame ||\n    window.webkitRequestCancelAnimationFrame ||\n    window.mozRequestCancelAnimationFrame ||\n    window.oRequestCancelAnimationFrame ||\n    window.msRequestCancelAnimationFrame ||\n    (id => clearTimeout(id))\n  );\n})();\n\nvar App = {\n  start() {\n    this.originalSimonSounds = {\n      UL: 164.814,\n      UR: 440,\n      LL: 277.18,\n      LR: 329.628,\n    };\n    this.simonSwipeSounds = {\n      UL: 523.251, // 783.991 - original\n      UR: 329.628,\n      LL: 261.63,\n      LR: 391.995,\n    };\n    this.soundLib = this.simonSwipeSounds;\n    this.stepsInGame = 20;\n    this.currentStep = 1;\n    this.currentNoteInStep = 1;\n    this.tempo = 120;\n    this.strictMode = false;\n    this.reactionDelay = 1 * 1000;\n    this.messageError = '!!';\n    this.messageStop = '--';\n    this.messageWin = '00';\n    this.gameButtonNames = ['UR', 'LR', 'LL', 'UL'];\n\n    // utility\n    this.notesInQueue = [];\n    this.lastNoteToDraw = '';\n    this.requestId = -1;\n    this.playSequence = this.playSequence.bind(this);\n    this.repeatSequence = this.repeatSequence.bind(this);\n    this.playPhrase = this.playPhrase.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.playSound = this.playSound.bind(this);\n    this.setStrictMode = this.setStrictMode.bind(this);\n    this.handleGameState = this.handleGameState.bind(this);\n    this.draw = this.draw.bind(this);\n  },\n\n  playSequence(sequence, step) {\n    log.debug(`Playing sequence on step ${step}`);\n    sequence.slice(0, step).forEach((note, ndx) => {\n      // fill in the list of buttons to blink when each note plays;\n      this.notesInQueue.push({\n        note,\n        time: ndx * 60 / this.tempo + this.context.currentTime,\n      });\n    });\n    log.debug(JSON.stringify(this.notesInQueue));\n    this.requestId = window.requestAnimFrame(this.draw);\n    return Promise.all(\n      this.notesInQueue.map((item, ndx, arr) => {\n        if (ndx === arr.length - 1) {\n          // user interaction shouldn't stuck while the last note is playing -\n          // as long as it starts sound the app should be ready to interaction;\n          // so we don't need to wait for the last promise in a row to be resolved;\n          this.playInTimePromise(\n            this.soundLib[item.note],\n            item.time - this.context.currentTime,\n          );\n        } else {\n          return this.playInTimePromise(\n            this.soundLib[item.note],\n            item.time - this.context.currentTime,\n          );\n        }\n      }),\n    );\n  },\n\n  playPhrase(sequence, soundLib) {\n    log.debug('Playing musical phrase');\n    let time = 0;\n    sequence.forEach((note, ndx) => {\n      console.log(`note in phrase: ${note}`);\n      // play a single note from the sequence\n      if (typeof note[0] !== 'object') {\n        this.playInTimePromise(soundLib[note[0]], time);\n        this.notesInQueue.push({\n          // the blinking effect goes round starting from the upper right button;\n          note: this.gameButtonNames[ndx > 3 ? ndx % 4 : ndx],\n          time: time + this.context.currentTime,\n        });\n      } else {\n        // play a chord from the sequence\n        note[0].forEach(item => {\n          this.playInTimePromise(soundLib[item], time, time);\n          this.notesInQueue.push({\n            // on chord blink with all buttons;\n            note: 'ALL',\n            time: time + this.context.currentTime,\n          });\n        });\n      }\n      time += note[1];\n    });\n    this.requestId = window.requestAnimFrame(this.draw);\n  },\n\n  randomRange(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  },\n\n  generateSequence(length) {\n    log.debug('Generating sequence');\n    let sequence = new Array(length).fill(undefined);\n    sequence.reduce((prev, current, ndx) => {\n      do {\n        current = this.randomRange(Object.keys(this.soundLib));\n      } while (prev === current);\n      sequence[ndx] = current;\n      return current;\n    }, '');\n    return sequence;\n  },\n\n  handleWin() {\n    let fanfareSeq = [\n      ['G1', 0.25],\n      ['C2', 0.25],\n      ['E2', 0.25],\n      ['G2', 0.5],\n      ['E2', 0.25],\n      [['C2', 'E2', 'G2'], 0.5],\n    ];\n    let fanfareSounds = {\n      G1: 392.0,\n      C2: 523.251,\n      E2: 659.255,\n      G2: 783.99,\n    };\n    this.playPhrase(fanfareSeq, fanfareSounds);\n  },\n};\n\nvar UI = {\n  listen() {\n    log.debug('Listening on UI');\n    this.soundButtons = document.querySelectorAll('.buttonGame');\n    this.repeatBtn = document.querySelector('#btnRepeat');\n    let startBtn = document.querySelector('#btnStart');\n    let strictBtn = document.querySelector('#btnStrict');\n    log.trace('Buttons selected:');\n    log.trace(this.soundButtons);\n    startBtn.addEventListener('click', this.handleStart);\n    this.soundButtons.forEach(btn =>\n      btn.addEventListener('click', this.handleGameState),\n    );\n    this.repeatBtn.addEventListener('click', this.repeatSequence);\n    strictBtn.addEventListener('click', this.setStrictMode);\n    this.pauseListen();\n  },\n\n  pauseListen() {\n    log.debug('Pause listening on color buttons');\n    [...this.soundButtons, this.repeatBtn].forEach(elm =>\n      this.pauseListenElm(elm),\n    );\n  },\n\n  resumeListen() {\n    log.debug('Resume listening on color buttons');\n    [...this.soundButtons, this.repeatBtn].forEach(elm =>\n      this.resumeListenElm(elm),\n    );\n  },\n\n  pauseListenElm(elm) {\n    elm.classList.remove('--events-enabled');\n    elm.classList.add('--events-disabled');\n  },\n\n  resumeListenElm(elm) {\n    elm.classList.remove('--events-disabled');\n    elm.classList.add('--events-enabled');\n  },\n\n  blinkAttr(elm, className) {\n    elm.classList.toggle(className);\n    setTimeout(() => elm.classList.toggle(className), 200);\n  },\n\n  changeStyle(elm) {\n    var noteName = this.getNote({ target: elm });\n    this.blinkAttr(elm, `--blink-${noteName}`);\n  },\n\n  getElementByName(name) {\n    return document.querySelector(`#button_${name}`);\n  },\n\n  getNote(e) {\n    return e.target.id.split('_')[1];\n  },\n\n  handleGameState(e) {\n    this.vibrateOnTouch();\n    this.playSound(e);\n    var notePressed = this.getNote(e);\n    if (this.sequence[this.currentNoteInStep - 1] === notePressed) {\n      log.debug('Bingo!');\n      // We've played the whole step\n      if (this.currentNoteInStep === this.currentStep) {\n        // we've played the whole sequence\n        this.pauseListen();\n        if (this.currentStep === this.stepsInGame) {\n          this.showMessage(this.messageWin);\n          this.later(this.reactionDelay).then(this.handleWin());\n          // we are still somewhere in a sequence and ready for a new step\n        } else {\n          this.currentStep += 1;\n          this.currentNoteInStep = 1;\n          this.showMessage(this.currentStep);\n          this.later(this.reactionDelay, [this.sequence, this.currentStep])\n            .then(args => this.playSequence(...args))\n            .then(() => this.resumeListen());\n        }\n        // wait for another note in current step\n      } else {\n        this.currentNoteInStep += 1;\n      }\n    } else {\n      log.debug('Missed!');\n      this.showMessage(this.messageError);\n      // restart the game if we are in a strict mode\n      if (this.strictMode) {\n        this.later(this.reactionDelay * 2).then(() => this.handleStart());\n      } else {\n        this.pauseListen();\n        // repeat the last step sequence\n        this.currentNoteInStep = 1;\n        this.later(this.reactionDelay, [this.currentStep])\n          .then(args => {\n            this.showMessage(...args);\n            return this.later(this.reactionDelay, [\n              this.sequence,\n              this.currentStep,\n            ]);\n          })\n          .then(args => this.playSequence(...args))\n          .then(() => this.resumeListen());\n      }\n    }\n  },\n\n  handleStart(e) {\n    this.context.resume();\n    this.currentStep = 1;\n    this.currentNoteInStep = 1;\n    this.sequence = this.generateSequence(this.stepsInGame);\n    this.showMessage(this.messageStop);\n    this.togglePressedState(e);\n    this.later(this.reactionDelay, [this.currentStep])\n      .then(args => {\n        this.showMessage(...args);\n        return [e];\n      })\n      .then(args => {\n        this.togglePressedState(...args);\n        return this.later(this.reactionDelay, [\n          this.sequence,\n          this.currentStep,\n        ]);\n      })\n      .then(args => this.playSequence(...args))\n      .then(() => this.resumeListen());\n  },\n\n  repeatSequence() {\n    this.pauseListen();\n    this.currentNoteInStep = 1;\n    this.later(this.reactionDelay * 0.5, [this.sequence, this.currentStep])\n      .then(args => this.playSequence(...args))\n      .then(() => this.resumeListen());\n  },\n\n  later(delay, value = []) {\n    return new Promise(resolve => setTimeout(() => resolve([...value]), delay));\n  },\n\n  playSound(e) {\n    log.debug('Play sound on a mouse click');\n    log.trace(e);\n    let value = this.getNote(e);\n    this.playSequence([value], 1);\n  },\n\n  vibrateOnTouch() {\n    if ('vibrate' in navigator) {\n      navigator.vibrate =\n        navigator.vibrate ||\n        navigator.webkitVibrate ||\n        navigator.mozVibrate ||\n        navigator.msVibrate;\n      navigator.vibrate(30);\n    }\n  },\n\n  togglePressedState(e) {\n    if (e) e.target.classList.toggle('--pressed');\n  },\n\n  setStrictMode(e) {\n    this.strictMode = !this.strictMode;\n    this.togglePressedState(e);\n  },\n\n  showMessage(message) {\n    let messageElm = document.querySelector('#messageElm');\n    messageElm.innerHTML = message;\n  },\n\n  draw() {\n    let currentTime = this.context.currentTime;\n    let currentNote;\n    log.trace(\n      `Inside this.draw() notesInQueue: ${JSON.stringify(this.notesInQueue)}`,\n    );\n    while (\n      this.notesInQueue.length > 0 &&\n      this.notesInQueue[0].time < currentTime\n    ) {\n      currentNote = this.notesInQueue[0].note;\n      this.notesInQueue.splice(0, 1);\n    }\n\n    log.trace(\n      `Styling button; currentNote: ${currentNote}, lastNote: ${\n        this.lastNoteToDraw\n      }`,\n    );\n    if (currentNote !== undefined && this.lastNoteToDraw !== currentNote) {\n      if (currentNote !== 'ALL') {\n        this.changeStyle(this.getElementByName(currentNote));\n        this.lastNoteToDraw = currentNote;\n      } else {\n        this.gameButtonNames.forEach(name =>\n          this.changeStyle(this.getElementByName(name)),\n        );\n      }\n    }\n    this.requestId = window.requestAnimFrame(this.draw);\n    if (this.notesInQueue.length === 0) {\n      window.cancelAnimationFrame(this.requestId);\n      this.lastNoteToDraw = '';\n      this.requestId = undefined;\n    }\n  },\n};\n\nvar SoundGen = {\n  init() {\n    this.context = new (window.AudioContext || window.webkitAudioContext)();\n  },\n\n  setup() {\n    this.oscillator = this.context.createOscillator();\n    this.gainNode = this.context.createGain();\n\n    this.oscillator.connect(this.gainNode);\n    this.gainNode.connect(this.context.destination);\n    this.oscillator.type = 'sine';\n  },\n\n  playInTime(value, time) {\n    this.setup();\n    log.debug(`Tone value: ${value}`);\n    this.oscillator.frequency.setValueAtTime(\n      value,\n      this.context.currentTime + time,\n    );\n    this.gainNode.gain.setValueAtTime(0, this.context.currentTime + time);\n    this.gainNode.gain.linearRampToValueAtTime(\n      1,\n      this.context.currentTime + time + 0.01,\n    );\n    this.oscillator.start(this.context.currentTime + time);\n    this.stopAtTime(time);\n    this.oscillator.onended = () => Promise.resolve();\n  },\n\n  playInTimePromise(value, time) {\n    return new Promise(resolve => {\n      this.setup();\n      log.debug(`Tone value: ${value}`);\n      this.oscillator.frequency.setValueAtTime(\n        value,\n        this.context.currentTime + time,\n      );\n      this.gainNode.gain.setValueAtTime(0, this.context.currentTime + time);\n      this.gainNode.gain.linearRampToValueAtTime(\n        1,\n        this.context.currentTime + time + 0.01,\n      );\n      this.oscillator.start(this.context.currentTime + time);\n      this.stopAtTime(time);\n      this.oscillator.onended = () => resolve(value);\n    });\n  },\n\n  stopAtTime(time) {\n    this.gainNode.gain.exponentialRampToValueAtTime(\n      0.001,\n      this.context.currentTime + time + 1,\n    );\n    this.oscillator.stop(this.context.currentTime + time + 1);\n  },\n};\n\nlog.setLevel('debug');\nObject.assign(App, SoundGen, UI);\nApp.init();\nApp.start();\nApp.listen();\n"],"sourceRoot":"/source/"}